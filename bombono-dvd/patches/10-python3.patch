diff -Nur orig/libs/boost-lib/SConscript mod/libs/boost-lib/SConscript
--- orig/libs/boost-lib/SConscript	2016-04-10 12:45:39.000000000 +0200
+++ mod/libs/boost-lib/SConscript	2020-04-04 10:14:12.294895702 +0200
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/python3
 Import('boost_env')
 Import('user_options_dict')
 
diff -Nur orig/libs/mpeg2dec/SConscript mod/libs/mpeg2dec/SConscript
--- orig/libs/mpeg2dec/SConscript	2016-04-10 12:45:39.000000000 +0200
+++ mod/libs/mpeg2dec/SConscript	2020-04-04 10:14:41.582854718 +0200
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/python3
 
 #######################
 # Port from Automake.am
@@ -11,6 +11,7 @@
 # because log_file cant be written to build dir
 #SConscript(['SConscript.autoconf'])
 
+from __future__ import print_function
 import BuildVars
 Import('env', 'user_options_dict')
 
@@ -69,9 +70,9 @@
 
 def GenerateMpeg2DecCfg(target, source, env):
     cfg_file = open(target[0].path, 'w')
-    print >> cfg_file, "/* Auto-generated header */"
-    print >> cfg_file
-    print >> cfg_file, '#include <cfg/config.h>'
+    print("/* Auto-generated header */", file=cfg_file)
+    print(file=cfg_file)
+    print('#include <cfg/config.h>', file=cfg_file)
 
     BuildVars.AddDefine(cfg_file, 'ACCEL_DETECT', is_on = 1, comment = "autodetect accelerations")
     BuildVars.AddDefine(cfg_file, 'LIBVO_DX',     is_on = 0, comment = "libvo DirectX support")
diff -Nur orig/libs/SConscript mod/libs/SConscript
--- orig/libs/SConscript	2016-04-10 12:45:39.000000000 +0200
+++ mod/libs/SConscript	2020-04-04 10:13:12.546979310 +0200
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/python3
 
 import BuildVars as BV
 Import('env', 'menv', 'user_options_dict')
diff -Nur orig/po/SConscript mod/po/SConscript
--- orig/po/SConscript	2016-04-10 12:45:39.000000000 +0200
+++ mod/po/SConscript	2020-04-04 09:18:42.099554136 +0200
@@ -1,5 +1,7 @@
-#!/usr/bin/env python
+#!/usr/bin/python3
 
+from __future__ import print_function
+from builtins import str
 Import('env', 'user_options_dict')
 
 # .po handling code stolen from Ardour
@@ -35,7 +37,7 @@
              str(source[0]),
              str(source[1]),
            ]
-    print 'Updating ' + trgt
+    print('Updating ' + trgt)
     return os.spawnvp(os.P_WAIT, 'msgmerge', args)
 
 po_bld = Builder (action = po_builder)
diff -Nur orig/SConstruct mod/SConstruct
--- orig/SConstruct	2020-04-04 09:06:21.000000000 +0200
+++ mod/SConstruct	2020-04-04 09:08:39.307938741 +0200
@@ -1,4 +1,6 @@
-#!/usr/bin/env python
+#!/usr/bin/python3
+from __future__ import print_function
+from builtins import str
 import string
 import os
 import sys
@@ -274,13 +276,13 @@
 # Config
 
 if os.path.exists( BV.CfgFile ):
-    print "Using config file: " + BV.CfgFile
+    print("Using config file: " + BV.CfgFile)
 
     user_options = Variables(BV.CfgFile, BV.Args)
     ParseVariables(user_options)
 
 else:
-    print "Creating new config file: " + BV.CfgFile
+    print("Creating new config file: " + BV.CfgFile)
 
     user_options = Variables(None, BV.Args)
     ParseVariables(user_options)
@@ -352,10 +354,10 @@
 
 def GenerateBaseConfigH(target, source, env):
     cfg_file = open(target[0].path, 'w')
-    print >> cfg_file, "/* Generated by means of Autoconfig */"
+    print("/* Generated by means of Autoconfig */", file=cfg_file)
 
     config_dict = user_options_dict['CONFIGURATION']
-    key_list = config_dict.keys()
+    key_list = list(config_dict.keys())
     key_list.sort()
 
     for key in key_list:
@@ -363,9 +365,9 @@
 
         text = var.get('text', None)
         if text:
-            print >> cfg_file
+            print(file=cfg_file)
             BV.AddComment(cfg_file, var)
-            print >> cfg_file, text
+            print(text, file=cfg_file)
             continue
 
         BV.AddDefine(cfg_file, key, **var)
diff -Nur orig/tools/scripts/AuxTools.py mod/tools/scripts/AuxTools.py
--- orig/tools/scripts/AuxTools.py	2016-04-10 12:45:39.000000000 +0200
+++ mod/tools/scripts/AuxTools.py	2020-04-04 09:14:30.919572404 +0200
@@ -1,10 +1,11 @@
+from builtins import object
 import os.path
 import SCons.Tool
 
 # we dont like to write like
 #   env.Depends('.', env.Program(...))
 # , so we use this emitter
-class BindEmitter:
+class BindEmitter(object):
     def __init__(self, parent_emitter):
         self.parent_emitter = parent_emitter
 
diff -Nur orig/tools/scripts/BuildVars.py mod/tools/scripts/BuildVars.py
--- orig/tools/scripts/BuildVars.py	2016-04-10 12:45:39.000000000 +0200
+++ mod/tools/scripts/BuildVars.py	2020-04-04 09:13:21.019631058 +0200
@@ -1,4 +1,7 @@
+from __future__ import print_function
 # Global variables for Atom build process
+from builtins import str
+from builtins import range
 import os
 import platform
 
@@ -30,11 +33,11 @@
 
 def PrintBright(is_end):
     if not is_end:
-        print
-        print "****************************************************"
+        print()
+        print("****************************************************")
     else:
-        print "****************************************************"
-        print
+        print("****************************************************")
+        print()
 
 def IsDebugCfg():
     return BuildCfg == 'debug'
@@ -68,10 +71,10 @@
 def CheckSettings(main_env):
     global Cc, Cxx, BuildDir, Targets, RunTests, BuildTests
     if RunTests :
-        print 'Tests: on'
+        print('Tests: on')
     else:
         if BuildTests:
-            print 'Tests: on (only building)'
+            print('Tests: on (only building)')
 
     def_env = GetDefEnv()
     # for SCons =<0.96 we need to warn that just 'scons' is not enough:
@@ -92,9 +95,9 @@
       ( (len(BuildDir) >= 1 and BuildDir[0] == '/') or (len(BuildDir) >= 2 and BuildDir[0:2] == '..') ) and \
       (Targets == [] or Targets == ['.']) :
         PrintBright(0)
-        print 'Warning! "scons" or "scons ." detected while BUILD_DIR is outside "."!'
-        print 'To build successfully with SCons <= v0.96.1 you may need to run something like '
-        print '\t"scons <...> ' + BuildDir + '".' 
+        print('Warning! "scons" or "scons ." detected while BUILD_DIR is outside "."!')
+        print('To build successfully with SCons <= v0.96.1 you may need to run something like ')
+        print('\t"scons <...> ' + BuildDir + '".') 
         PrintBright(1)
 
     # we use TestSConscript() function instead of SConscript()
@@ -149,7 +152,7 @@
     SetBriefOutput(main_env)
 
     # to separate our output from SCons'
-    print
+    print()
 
 # Non/Verbose output
 def SetBriefOutput(env):
@@ -228,7 +231,7 @@
 
 def ErrorAndExit(msg):
     PrintBright(0)
-    print msg
+    print(msg)
     PrintBright(1)
 
     GetDefEnv().Exit(1)
@@ -255,18 +258,18 @@
     if add_defines:
         keys_list.append('CPPDEFINES')
     for key in keys_list:
-        if key in tmp_dict.keys():
+        if key in list(tmp_dict.keys()):
             res_dict[key] = tmp_dict[key]
 
     if Cc != 'como':
         # need to add link flags like "-Wl,--rpath -Wl,<path>"
-        if 'LIBPATH' in res_dict.keys():
+        if 'LIBPATH' in list(res_dict.keys()):
             # we dont want to change dict['LIBPATH'] so we need a copy
             #lib_list = []
             #lib_list[:] = dict['LIBPATH']
             lib_list = list(res_dict['LIBPATH'])
             # but we dont want to "rpath" anything like /usr/X11R6/lib
-            for i in xrange(len(lib_list)-1, -1, -1) :
+            for i in range(len(lib_list)-1, -1, -1) :
                 if lib_list[i].startswith('/usr/') :
                     #print i    
                     lib_list[i:i+1] = []
@@ -383,20 +386,20 @@
         comment = MakeHeaderComment(var['ccomment'], var.get('val') == '1')
 
     if comment:
-        print >> cfg_file, "/* " + comment + " */"
+        print("/* " + comment + " */", file=cfg_file)
 
 def AddDefine(cfg_file, key, **var):
-    print >> cfg_file
+    print(file=cfg_file)
     AddComment(cfg_file, var)
 
     if var['is_on']:
         str = var.get('val', None)
         if str == None:
-            print >> cfg_file, "#define %s" % key
+            print("#define %s" % key, file=cfg_file)
         else:
-            print >> cfg_file, "#define %s %s" % (key, var['val'])
+            print("#define %s %s" % (key, var['val']), file=cfg_file)
     else:
-        print >> cfg_file, "/* #undef %s */" % key
+        print("/* #undef %s */" % key, file=cfg_file)
 
 GenFunctionMap = {}
 
@@ -405,7 +408,7 @@
     using 'gen_function' and traditional target/source pair.'''
     def_env = GetDefEnv()
 
-    if 'CfgBuilder' not in def_env['BUILDERS'].keys():
+    if 'CfgBuilder' not in list(def_env['BUILDERS'].keys()):
         # first time, create cfg builder
         def GenerateConfigFile(target, source, env):
             global GenFunctionMap
@@ -418,7 +421,7 @@
 
     global GenFunctionMap
     key = def_env.File(target).abspath
-    assert not(key in GenFunctionMap.keys())
+    assert not(key in list(GenFunctionMap.keys()))
     GenFunctionMap[key] = gen_function
 
     def_env.CfgBuilder(target, source)
@@ -450,14 +453,14 @@
     dst = []
     if to_convert:
         def_env = GetDefEnv()
-        for i in xrange(len(dir_list)):
+        for i in range(len(dir_list)):
             dir_list[i] = def_env.Dir(dir_list[i]).path
     for path in dir_list:
         dst.append('-I' + path)
     return dst
 
 def MoveIncludeOptions(dict):
-    if 'CPPPATH' in dict.keys():
+    if 'CPPPATH' in list(dict.keys()):
         dict['POST_CPPINCFLAGS'] = MakeIncludeOptions(dict['CPPPATH'])
         del dict['CPPPATH']
 
@@ -495,7 +498,7 @@
             res = True
         elif not IsReenter(IsToBuildQuick):
             # warn once only
-            print 'BUILD_QUICK=true is not supported for current compiler(%s)!' % Cc
+            print('BUILD_QUICK=true is not supported for current compiler(%s)!' % Cc)
 
     return res
 
@@ -504,7 +507,7 @@
 
 def CreateEnvVersion2(**kw):
     tools = ['default', 'AuxTools']
-    if kw.has_key('tools'):
+    if 'tools' in kw:
         tools += kw['tools']
     kw['tools'] = tools
 
diff -Nur orig/tools/scripts/copy_boost.py mod/tools/scripts/copy_boost.py
--- orig/tools/scripts/copy_boost.py	2016-04-10 12:45:39.000000000 +0200
+++ mod/tools/scripts/copy_boost.py	2020-04-04 09:15:12.407615262 +0200
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/python3
 # coding: utf-8
 
 #
@@ -7,6 +7,7 @@
 # Пример: BCP=bcp tools/scripts/copy_boost.py /home/ilya/opt/programming/atom-project/boost_1_44_0 libs/boost-lib/
 #
 
+from __future__ import print_function
 from call_cmd import call_cmd, make_call_in_dst
 import os, o_p
 
@@ -26,7 +27,7 @@
         for fname in os.listdir(boost_dst):
             if not fname in lst:
                 fpath = os.path.join(boost_dst, fname)
-                print 'rm', fpath
+                print('rm', fpath)
                 o_p.del_any_fpath(fpath)
     
     cmd = '''%(bcp)s --boost=%(boost_src)s boost/smart_ptr.hpp boost/test boost/function.hpp boost/lambda boost/bind \
diff -Nur orig/tools/scripts/gch.py mod/tools/scripts/gch.py
--- orig/tools/scripts/gch.py	2016-04-10 12:45:39.000000000 +0200
+++ mod/tools/scripts/gch.py	2020-04-04 09:13:32.471615691 +0200
@@ -24,6 +24,7 @@
 # $LastChangedDate$
 # $LastChangedBy$
 
+from builtins import str
 import SCons.Action
 import SCons.Builder
 import SCons.Scanner.C
@@ -78,10 +79,10 @@
 
 
 def SetPCHDependencies(target, source, env, gch_key):
-    if env.has_key(gch_key) and env[gch_key]:
+    if gch_key in env and env[gch_key]:
         gch_node = env[gch_key]
         # Murav'jov - alternative variant
-        if env.has_key('DepGch') and env['DepGch']:
+        if 'DepGch' in env and env['DepGch']:
             env.Depends(target, gch_node)
         else:
             scanner = GetCScannerFunc()
