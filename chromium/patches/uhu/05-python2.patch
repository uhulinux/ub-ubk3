diff -Naur orig/tools/gn/src/gn/json_project_writer_unittest.cc patched/tools/gn/src/gn/json_project_writer_unittest.cc
--- orig/tools/gn/src/gn/json_project_writer_unittest.cc	2020-05-18 20:48:23.000000000 +0200
+++ patched/tools/gn/src/gn/json_project_writer_unittest.cc	2020-05-21 22:25:37.077571665 +0200
@@ -37,7 +37,7 @@
       SubstitutionList::MakeForTest("//out/Debug/output1.out");
 
   setup.build_settings()->set_python_path(
-      base::FilePath(FILE_PATH_LITERAL("/usr/bin/python")));
+      base::FilePath(FILE_PATH_LITERAL("/usr/bin/python2")));
   std::vector<const Target*> targets;
   targets.push_back(&target);
 #if defined(OS_WIN)
@@ -172,7 +172,7 @@
       SubstitutionList::MakeForTest("//out/Debug/{{source_name_part}}.out");
 
   setup.build_settings()->set_python_path(
-      base::FilePath(FILE_PATH_LITERAL("/usr/bin/python")));
+      base::FilePath(FILE_PATH_LITERAL("/usr/bin/python2")));
   std::vector<const Target*> targets;
   targets.push_back(&target);
 #if defined(OS_WIN)
diff -Naur orig/tools/gn/src/gn/ninja_action_target_writer_unittest.cc patched/tools/gn/src/gn/ninja_action_target_writer_unittest.cc
--- orig/tools/gn/src/gn/ninja_action_target_writer_unittest.cc	2020-05-18 20:48:23.000000000 +0200
+++ patched/tools/gn/src/gn/ninja_action_target_writer_unittest.cc	2020-05-21 22:25:37.077571665 +0200
@@ -54,14 +54,14 @@
   ASSERT_TRUE(target.OnResolved(&err));
 
   setup.build_settings()->set_python_path(
-      base::FilePath(FILE_PATH_LITERAL("/usr/bin/python")));
+      base::FilePath(FILE_PATH_LITERAL("/usr/bin/python2")));
 
   std::ostringstream out;
   NinjaActionTargetWriter writer(&target, out);
   writer.Run();
 
   const char* expected = R"(rule __foo_bar___rule
-  command = /usr/bin/python ../../foo/script.py
+  command = /usr/bin/python2 ../../foo/script.py
   description = ACTION //foo:bar()
   restat = 1
 
@@ -96,7 +96,7 @@
   ASSERT_TRUE(target.OnResolved(&err));
 
   setup.build_settings()->set_python_path(
-      base::FilePath(FILE_PATH_LITERAL("/usr/bin/python")));
+      base::FilePath(FILE_PATH_LITERAL("/usr/bin/python2")));
 
   std::ostringstream out;
   NinjaActionTargetWriter writer(&target, out);
@@ -105,7 +105,7 @@
   // The console pool's name must be mapped exactly to the string "console"
   // which is a special pre-defined pool name in ninja.
   const char* expected = R"(rule __foo_bar___rule
-  command = /usr/bin/python ../../foo/script.py
+  command = /usr/bin/python2 ../../foo/script.py
   description = ACTION //foo:bar()
   restat = 1
 
@@ -138,7 +138,7 @@
   ASSERT_TRUE(target.OnResolved(&err));
 
   setup.build_settings()->set_python_path(
-      base::FilePath(FILE_PATH_LITERAL("/usr/bin/python")));
+      base::FilePath(FILE_PATH_LITERAL("/usr/bin/python2")));
 
   std::ostringstream out;
   NinjaActionTargetWriter writer(&target, out);
@@ -146,7 +146,7 @@
 
   const char expected_linux[] =
       "rule __foo_bar___rule\n"
-      "  command = /usr/bin/python ../../foo/script.py\n"
+      "  command = /usr/bin/python2 ../../foo/script.py\n"
       "  description = ACTION //foo:bar()\n"
       "  restat = 1\n"
       "\n"
@@ -198,7 +198,7 @@
   ASSERT_TRUE(target.OnResolved(&err));
 
   setup.build_settings()->set_python_path(
-      base::FilePath(FILE_PATH_LITERAL("/usr/bin/python")));
+      base::FilePath(FILE_PATH_LITERAL("/usr/bin/python2")));
 
   std::ostringstream out;
   NinjaActionTargetWriter writer(&target, out);
@@ -206,7 +206,7 @@
 
   const char expected_linux[] =
       "rule __foo_bar___rule\n"
-      "  command = /usr/bin/python ../../foo/script.py -i ${in} "
+      "  command = /usr/bin/python2 ../../foo/script.py -i ${in} "
 // Escaping is different between Windows and Posix.
 #if defined(OS_WIN)
       "\"--out=foo$ bar${source_name_part}.o\"\n"
@@ -263,7 +263,7 @@
   target.config_values().inputs().push_back(SourceFile("//foo/included.txt"));
 
   setup.build_settings()->set_python_path(
-      base::FilePath(FILE_PATH_LITERAL("/usr/bin/python")));
+      base::FilePath(FILE_PATH_LITERAL("/usr/bin/python2")));
 
   std::ostringstream out;
   NinjaActionTargetWriter writer(&target, out);
@@ -271,7 +271,7 @@
 
   const char expected_linux[] =
       "rule __foo_bar___rule\n"
-      "  command = /usr/bin/python ../../foo/script.py -i ${in} "
+      "  command = /usr/bin/python2 ../../foo/script.py -i ${in} "
 #if defined(OS_WIN)
       "\"--out=foo$ bar${source_name_part}.o\"\n"
 #else
@@ -318,7 +318,7 @@
       SubstitutionList::MakeForTest("//out/Debug/{{source_name_part}}.out");
 
   setup.build_settings()->set_python_path(
-      base::FilePath(FILE_PATH_LITERAL("/usr/bin/python")));
+      base::FilePath(FILE_PATH_LITERAL("/usr/bin/python2")));
 
   std::ostringstream out;
   NinjaActionTargetWriter writer(&target, out);
@@ -331,7 +331,7 @@
       // These come from rsp_file_contents above.
       "  rspfile_content = -j ${source_name_part}\n"
       // These come from the args.
-      "  command = /usr/bin/python ../../foo/script.py ${in} "
+      "  command = /usr/bin/python2 ../../foo/script.py ${in} "
       "${source_file_part} ${rspfile}\n"
       "  description = ACTION //foo:bar()\n"
       "  restat = 1\n"
@@ -376,7 +376,7 @@
       SubstitutionList::MakeForTest("//out/Debug/{{source_name_part}}.out");
 
   setup.build_settings()->set_python_path(
-      base::FilePath(FILE_PATH_LITERAL("/usr/bin/python")));
+      base::FilePath(FILE_PATH_LITERAL("/usr/bin/python2")));
 
   std::ostringstream out;
   NinjaActionTargetWriter writer(&target, out);
@@ -385,7 +385,7 @@
   const char expected_linux[] =
       "rule __foo_bar___rule\n"
       // These come from the args.
-      "  command = /usr/bin/python ../../foo/script.py ${in} "
+      "  command = /usr/bin/python2 ../../foo/script.py ${in} "
       "${source_file_part}\n"
       "  description = ACTION //foo:bar()\n"
       "  restat = 1\n"
@@ -405,7 +405,7 @@
   TestWithScope setup;
 
   setup.build_settings()->set_python_path(
-      base::FilePath(FILE_PATH_LITERAL("/usr/bin/python")));
+      base::FilePath(FILE_PATH_LITERAL("/usr/bin/python2")));
 
   Target dep(setup.settings(), Label(SourceDir("//foo/"), "dep"));
   dep.set_output_type(Target::ACTION);
@@ -432,7 +432,7 @@
     const char expected_linux[] =
         "rule __foo_foo___rule\n"
         // These come from the args.
-        "  command = /usr/bin/python ../../foo/script.py\n"
+        "  command = /usr/bin/python2 ../../foo/script.py\n"
         "  description = ACTION //foo:foo()\n"
         "  restat = 1\n"
         "\n"
@@ -461,7 +461,7 @@
     const char expected_linux[] =
         "rule __bar_bar___rule\n"
         // These come from the args.
-        "  command = /usr/bin/python ../../bar/script.py\n"
+        "  command = /usr/bin/python2 ../../bar/script.py\n"
         "  description = ACTION //bar:bar()\n"
         "  restat = 1\n"
         "\n"
diff -Naur orig/tools/gn/src/gn/setup.cc patched/tools/gn/src/gn/setup.cc
--- orig/tools/gn/src/gn/setup.cc	2020-05-18 20:48:23.000000000 +0200
+++ patched/tools/gn/src/gn/setup.cc	2020-05-21 22:25:37.081571671 +0200
@@ -717,7 +717,7 @@
     }
     build_settings_.set_python_path(python_path.NormalizePathSeparatorsTo('/'));
 #else
-    build_settings_.set_python_path(base::FilePath("python"));
+    build_settings_.set_python_path(base::FilePath("python2"));
 #endif
   }
   return true;
