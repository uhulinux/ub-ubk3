diff -Nur orig/python-ui/config.py mod/python-ui/config.py
--- orig/python-ui/config.py	2019-02-08 09:30:11.000000000 +0100
+++ mod/python-ui/config.py	2020-03-27 16:40:29.596485284 +0100
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/python3
 #
 # Class and helper functions for handling (Hatari) INI style
 # configuration files: loading, saving, setting/getting variables,
@@ -16,6 +16,9 @@
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 
+from __future__ import print_function
+from builtins import str
+from builtins import object
 import os
 # mapping from Hatari config variable name to type id (Bool, Int, String)
 from conftypes import conftypes
@@ -66,7 +69,7 @@
 # ------------------------------------------------------
 # Handle INI style configuration files as used by Hatari
 
-class ConfigStore:
+class ConfigStore(object):
     def __init__(self, confdirs, defaults = {}, miss_is_error = True):
         "ConfigStore(userconfdir, fgfile[,defaults,miss_is_error])"
         self.defaults = defaults
@@ -160,7 +163,7 @@
     def get_checkpoint(self):
         "get_checkpoint() -> checkpoint, get the state of variables at this point"
         checkpoint = {}
-        for section in self.sections.keys():
+        for section in list(self.sections.keys()):
             checkpoint[section] = self.sections[section].copy()
         return checkpoint
 
@@ -169,12 +172,12 @@
         changed = []
         if not self.changed:
             return changed
-        for section in self.sections.keys():
+        for section in list(self.sections.keys()):
             if section not in checkpoint:
-                for key, value in self.sections[section].items():
+                for key, value in list(self.sections[section].items()):
                     changed.append((key, value))
                 continue
-            for key, value in self.sections[section].items():
+            for key, value in list(self.sections[section].items()):
                 if (key not in checkpoint[section] or
                 value != checkpoint[section][key]):
                     text = value_to_text(key, value)
@@ -245,7 +248,7 @@
             print("ERROR: opening '%s' for saving failed" % self.path)
             return None
         self.write(fileobj)
-        print("Saved configuration file:", self.path)
+        print(("Saved configuration file:", self.path))
         self.changed = False
         return self.path
 
@@ -267,5 +270,5 @@
             print("ERROR: opening '%s' for saving failed" % path)
             return None
         self.write(fileobj)
-        print("Saved temporary configuration file:", path)
+        print(("Saved temporary configuration file:", path))
         return path
diff -Nur orig/python-ui/debugui.py mod/python-ui/debugui.py
--- orig/python-ui/debugui.py	2019-02-08 09:30:10.000000000 +0100
+++ mod/python-ui/debugui.py	2020-03-27 16:40:59.508450974 +0100
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/python3
 #
 # A Debug UI for the Hatari, part of Python Gtk Hatari UI
 #
@@ -14,6 +14,8 @@
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 
+from __future__ import print_function
+from builtins import object
 import os
 import gi
 # use correct version of gtk
@@ -36,7 +38,7 @@
 # -------------
 # Table dialogs
 
-class SaveDialog:
+class SaveDialog(object):
     def __init__(self, parent):
         table, self.dialog = create_table_dialog(parent, "Save from memory", 3, 2)
         self.file = FselEntry(self.dialog)
@@ -82,7 +84,7 @@
         return (filename, address, length)
 
 
-class LoadDialog:
+class LoadDialog(object):
     def __init__(self, parent):
         chooser = Gtk.FileChooserButton('Select a File')
         chooser.set_local_only(True)  # Hatari cannot access URIs
@@ -118,7 +120,7 @@
         return (filename, address)
 
 
-class OptionsDialog:
+class OptionsDialog(object):
     def __init__(self, parent):
         self.dialog = Gtk.Dialog("Debugger UI options", parent,
             Gtk.DialogFlags.MODAL | Gtk.DialogFlags.DESTROY_WITH_PARENT,
@@ -153,7 +155,7 @@
 # ----------------------------------------------------
 
 # constants for the other classes
-class Constants:
+class Constants(object):
     # dump modes
     DISASM = 1
     MEMDUMP = 2
@@ -166,7 +168,7 @@
 
 # class for the memory address entry, view (label) and
 # the logic for memory dump modes and moving in memory
-class MemoryAddress:
+class MemoryAddress(object):
     # class variables
     debug_output = None
     hatari = None
@@ -258,7 +260,7 @@
         elif self.dumpmode == Constants.DISASM:
             output = self._get_disasm(address, move_idx)
         else:
-            print("ERROR: unknown dumpmode:", self.dumpmode)
+            print(("ERROR: unknown dumpmode:", self.dumpmode))
             return
         self.memory.set_label("".join(output))
         if move_idx:
@@ -276,7 +278,7 @@
                 # WinUAE CPU core only in one
                 offset = output[-2].find(" ")
             if offset < 0:
-                print("ERROR: unable to parse register dump line:\n\t'%s'", output[-2])
+                print(("ERROR: unable to parse register dump line:\n\t'%s'", output[-2]))
                 return output
             self.first = int(output[-2][:offset], 16)
             self.reset_entry()
@@ -352,7 +354,7 @@
 
 
 # the Hatari debugger UI class and methods
-class HatariDebugUI:
+class HatariDebugUI(object):
 
     def __init__(self, hatariobj, do_destroy = False):
         self.address = MemoryAddress(hatariobj)
diff -Nur orig/python-ui/dialogs.py mod/python-ui/dialogs.py
--- orig/python-ui/dialogs.py	2019-02-08 09:30:11.000000000 +0100
+++ mod/python-ui/dialogs.py	2020-03-27 16:41:13.708489031 +0100
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/python3
 #
 # Classes for the Hatari UI dialogs
 #
@@ -14,6 +14,10 @@
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 
+from __future__ import print_function
+from builtins import str
+from builtins import range
+from builtins import object
 import os
 import gi
 # use correct version of gtk
@@ -31,7 +35,7 @@
 # -----------------
 # Dialog base class
 
-class HatariUIDialog:
+class HatariUIDialog(object):
     def __init__(self, parent):
         "<any>Dialog(parent) -> object"
         self.parent = parent
diff -Nur orig/python-ui/gentypes.py mod/python-ui/gentypes.py
--- orig/python-ui/gentypes.py	2019-02-08 09:30:10.000000000 +0100
+++ mod/python-ui/gentypes.py	2020-03-27 16:49:46.448643414 +0100
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/python3
 #
 # Utility to generate from Hatari C-code Python code for mapping
 # Hatari configuration variable names and types of those variables.
@@ -15,6 +15,7 @@
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 
+from __future__ import print_function
 import os, re, sys
 
 # match first two items (variable name and type) from lines like:
diff -Nur orig/python-ui/hatari.py mod/python-ui/hatari.py
--- orig/python-ui/hatari.py	2019-02-08 09:30:11.000000000 +0100
+++ mod/python-ui/hatari.py	2020-03-27 16:47:19.616513448 +0100
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/python3
 #
 # Classes for Hatari emulator instance and mapping its congfiguration
 # variables with its command line option.
@@ -15,6 +15,12 @@
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 
+from __future__ import print_function
+from builtins import chr
+from builtins import bytes
+from builtins import str
+from builtins import range
+from builtins import object
 import os
 import sys
 import time
@@ -31,7 +37,7 @@
 
 
 # Running Hatari instance
-class Hatari:
+class Hatari(object):
     "running hatari instance and methods for communicating with it"
     basepath = "/tmp/hatari-ui-" + str(os.getpid())
     logpath = basepath + ".log"
@@ -232,7 +238,7 @@
                 args += ["--control-socket", self.controlpath]
             if extra_args:
                 args += extra_args
-            print("RUN:", args)
+            print(("RUN:", args))
             os.execvpe(self.hataribin, args, env)
 
     def _set_embed_env(self, env, win_id):
diff -Nur orig/python-ui/hatariui.py mod/python-ui/hatariui.py
--- orig/python-ui/hatariui.py	2019-02-08 09:30:11.000000000 +0100
+++ mod/python-ui/hatariui.py	2020-03-27 16:41:26.552519637 +0100
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/python3
 #
 # A Python Gtk UI for Hatari that can embed the Hatari emulator window.
 #
@@ -16,6 +16,9 @@
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 
+from __future__ import print_function
+from builtins import str
+from builtins import object
 import os
 import sys
 import getopt
@@ -47,7 +50,7 @@
 # Class with Hatari and configuration instances which methods are
 # called to change those (with additional dialogs or directly).
 # Owns the application window and socket widget embedding Hatari.
-class UICallbacks:
+class UICallbacks(object):
     tmpconfpath = os.path.expanduser("~/.hatari/.tmp.cfg")
     def __init__(self):
         # Hatari and configuration
@@ -392,7 +395,7 @@
 # ---------------------------------------------------------------
 # class for creating menus, toolbars and panels
 # and managing actions bound to them
-class UIActions:
+class UIActions(object):
     def __init__(self):
         cb = self.callbacks = UICallbacks()
 
@@ -725,7 +728,7 @@
 
     error = None
     for opt, arg in opts:
-        print(opt, arg)
+        print((opt, arg))
         if opt in ("-e", "--embed"):
             embed = True
         elif opt in ("-f", "--fullscreen"):
diff -Nur orig/python-ui/tests/gtk-hatari-embed-test.py mod/python-ui/tests/gtk-hatari-embed-test.py
--- orig/python-ui/tests/gtk-hatari-embed-test.py	2019-02-08 09:30:11.000000000 +0100
+++ mod/python-ui/tests/gtk-hatari-embed-test.py	2020-03-27 16:43:33.672685461 +0100
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/python3
 #
 # Tests embedding hatari with three different methods:
 # "hatari": ask Hatari to reparent to given window
@@ -24,6 +24,9 @@
 #   socket / reparent & hatari:
 #     -> works fine
 
+from __future__ import print_function
+from builtins import str
+from builtins import object
 import os
 import sys
 import time
@@ -45,7 +48,7 @@
     sys.exit(1)
 
 
-class AppUI():
+class AppUI(object):
     hatari_wd = 640
     hatari_ht = 436 # Hatari window enables statusbar by default
 
diff -Nur orig/python-ui/tests/gtk-hello-world.py mod/python-ui/tests/gtk-hello-world.py
--- orig/python-ui/tests/gtk-hello-world.py	2019-02-08 09:30:11.000000000 +0100
+++ mod/python-ui/tests/gtk-hello-world.py	2020-03-27 16:43:17.944677951 +0100
@@ -1,10 +1,11 @@
-#!/usr/bin/env python
+#!/usr/bin/python3
 
+from builtins import object
 import gi
 gi.require_version('Gtk', '3.0')
 from gi.repository import Gtk
 
-class AppUI():
+class AppUI(object):
     def __init__(self):
         self.window = Gtk.Window(Gtk.WindowType.TOPLEVEL)
         self.window.connect("destroy", Gtk.main_quit)
diff -Nur orig/python-ui/uihelpers.py mod/python-ui/uihelpers.py
--- orig/python-ui/uihelpers.py	2019-02-08 09:30:11.000000000 +0100
+++ mod/python-ui/uihelpers.py	2020-03-27 16:40:03.468563924 +0100
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/python3
 #
 # Misc common helper classes and functions for the Hatari UI
 #
@@ -14,6 +14,8 @@
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 
+from __future__ import print_function
+from builtins import object
 import os
 import sys
 import gi
@@ -31,7 +33,7 @@
 # ---------------------
 # Hatari UI information
 
-class UInfo:
+class UInfo(object):
     """singleton constants for the UI windows,
     one instance is needed to initialize these properly"""
     version = "v1.4"
@@ -63,7 +65,7 @@
 # --------------------------------------------------------
 # functions for showing HTML files
 
-class UIHelp:
+class UIHelp(object):
     def __init__(self):
         """determine HTML viewer and where docs are"""
         self._view = self.get_html_viewer()
@@ -104,7 +106,7 @@
         if os.path.exists(path + "manual.html"):
             return path
         # if not, point to latest Hatari HG version docs
-        print("WARNING: Hatari manual not found at:", path + "manual.html")
+        print(("WARNING: Hatari manual not found at:", path + "manual.html"))
         return "http://hg.tuxfamily.org/mercurialroot/hatari/hatari/raw-file/tip/doc/"
 
     def set_mainwin(self, widget):
@@ -154,7 +156,7 @@
 # --------------------------------------------------------
 # auxiliary class+callback to be used with the PasteDialog
 
-class HatariTextInsert:
+class HatariTextInsert(object):
     def __init__(self, hatari, text):
         self.index = 0
         self.text = text
@@ -331,7 +333,7 @@
 
 
 # File selection button with eject button
-class FselAndEjectFactory:
+class FselAndEjectFactory(object):
     def __init__(self):
         pass
 
@@ -363,7 +365,7 @@
 # - set_current_name() works only for SAVE action,
 #   but file chooser button doesn't support that
 # i.e. I had to do my own (less nice) container widget...
-class FselEntry:
+class FselEntry(object):
     def __init__(self, parent, validate = None, data = None):
         self._parent = parent
         self._validate = validate
