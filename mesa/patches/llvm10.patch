diff -Naur orig/src/amd/common/ac_llvm_helper.cpp patched/src/amd/common/ac_llvm_helper.cpp
--- orig/src/amd/common/ac_llvm_helper.cpp	2019-12-04 23:10:12.000000000 +0100
+++ patched/src/amd/common/ac_llvm_helper.cpp	2020-08-03 18:15:34.110047960 +0200
@@ -197,7 +197,11 @@
 
 	if (TM->addPassesToEmitFile(p->passmgr, p->ostream,
 				    nullptr,
+#if LLVM_VERSION_MAJOR >= 10
+				    llvm::CGFT_ObjectFile)) {
+#else
 				    llvm::TargetMachine::CGFT_ObjectFile)) {
+#endif
 		fprintf(stderr, "amd: TargetMachine can't emit a file of this type!\n");
 		delete p;
 		return NULL;
diff -Naur orig/src/gallium/state_trackers/clover/llvm/codegen/native.cpp patched/src/gallium/state_trackers/clover/llvm/codegen/native.cpp
--- orig/src/gallium/state_trackers/clover/llvm/codegen/native.cpp	2019-12-04 23:10:12.000000000 +0100
+++ patched/src/gallium/state_trackers/clover/llvm/codegen/native.cpp	2020-08-03 18:13:57.865923699 +0200
@@ -105,7 +105,7 @@
 
    std::vector<char>
    emit_code(::llvm::Module &mod, const target &target,
-             TargetMachine::CodeGenFileType ft,
+             compat::CodeGenFileType ft,
              std::string &r_log) {
       std::string err;
       auto t = ::llvm::TargetRegistry::lookupTarget(target.triple, err);
@@ -128,7 +128,7 @@
 
          mod.setDataLayout(tm->createDataLayout());
          tm->Options.MCOptions.AsmVerbose =
-            (ft == TargetMachine::CGFT_AssemblyFile);
+            (ft == compat::CGFT_AssemblyFile);
 
          if (compat::add_passes_to_emit_file(*tm, pm, os, ft))
             fail(r_log, build_error(), "TargetMachine can't emit this file");
@@ -145,7 +145,7 @@
                                   const clang::CompilerInstance &c,
                                   std::string &r_log) {
    const auto code = emit_code(mod, target,
-                               TargetMachine::CGFT_ObjectFile, r_log);
+                               compat::CGFT_ObjectFile, r_log);
    return build_module_common(mod, code, get_symbol_offsets(code, r_log), c);
 }
 
@@ -156,7 +156,7 @@
    try {
       std::unique_ptr< ::llvm::Module> cmod { compat::clone_module(mod) };
       return as_string(emit_code(*cmod, target,
-                                 TargetMachine::CGFT_AssemblyFile, log));
+                                 compat::CGFT_AssemblyFile, log));
    } catch (...) {
       return "Couldn't output native disassembly: " + log;
    }
diff -Naur orig/src/gallium/state_trackers/clover/llvm/compat.hpp patched/src/gallium/state_trackers/clover/llvm/compat.hpp
--- orig/src/gallium/state_trackers/clover/llvm/compat.hpp	2019-12-04 23:10:12.000000000 +0100
+++ patched/src/gallium/state_trackers/clover/llvm/compat.hpp	2020-08-03 18:42:07.505148228 +0200
@@ -66,9 +66,25 @@
 #include <clang/Frontend/CodeGenOptions.h>
 #endif
 
+#if LLVM_VERSION_MAJOR >= 10
+#include <llvm/Support/CodeGen.h>
+#endif
+
 namespace clover {
    namespace llvm {
       namespace compat {
+
+#if LLVM_VERSION_MAJOR >= 10
+         const auto CGFT_ObjectFile = ::llvm::CGFT_ObjectFile;
+         const auto CGFT_AssemblyFile = ::llvm::CGFT_AssemblyFile;
+         typedef ::llvm::CodeGenFileType CodeGenFileType;
+#else
+         const auto CGFT_ObjectFile = ::llvm::TargetMachine::CGFT_ObjectFile;
+         const auto CGFT_AssemblyFile =
+            ::llvm::TargetMachine::CGFT_AssemblyFile;
+         typedef ::llvm::TargetMachine::CodeGenFileType CodeGenFileType;
+#endif
+
          template<typename T, typename AS>
          unsigned target_address_space(const T &target, const AS lang_as) {
             const auto &map = target.getAddressSpaceMap();
@@ -167,6 +183,20 @@
 #endif
          }
 
+         template<typename T> inline bool
+         create_compiler_invocation_from_args(clang::CompilerInvocation &cinv,
+                                              T copts,
+                                              clang::DiagnosticsEngine &diag)
+         {
+#if HAVE_LLVM >= 0x1000
+            return clang::CompilerInvocation::CreateFromArgs(
+               cinv, copts, diag);
+#else
+            return clang::CompilerInvocation::CreateFromArgs(
+               cinv, copts.data(), copts.data() + copts.size(), diag);
+#endif
+         }
+
          template<typename T, typename M>
          T get_abi_type(const T &arg_type, const M &mod) {
 #if HAVE_LLVM >= 0x0700
diff -Naur orig/src/gallium/state_trackers/clover/llvm/invocation.cpp patched/src/gallium/state_trackers/clover/llvm/invocation.cpp
--- orig/src/gallium/state_trackers/clover/llvm/invocation.cpp	2019-12-04 23:10:12.000000000 +0100
+++ patched/src/gallium/state_trackers/clover/llvm/invocation.cpp	2020-08-03 18:38:20.520547591 +0200
@@ -199,8 +199,8 @@
       const target &target = dev.ir_target();
       const std::string &device_clc_version = dev.device_clc_version();
 
-      if (!clang::CompilerInvocation::CreateFromArgs(
-             c->getInvocation(), copts.data(), copts.data() + copts.size(), diag))
+      if (!compat::create_compiler_invocation_from_args(
+             c->getInvocation(), copts, diag))
          throw invalid_build_options_error();
 
       diag_buffer->FlushDiagnostics(diag);
