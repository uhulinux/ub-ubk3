#!/bin/bash -eux

function alprogi {
	cd $1
    export PREFIX=/usr
    ub_install
    gunzip	$mandir/nvidia-$1.1.gz
    cd -
}

KVER="$(ls -1 /lib/modules | grep x86_64)"
#célkönyvtárak
moduldir="$UB_INSTALLDIR"/lib/modules/"$KVER"/kernel/drivers/video
cellibdir="$UB_INSTALLDIR"/usr/lib
celbindir="$UB_INSTALLDIR"/usr/bin
xmoduldir="$cellibdir"/xorg/modules
sharedir="$UB_INSTALLDIR"/usr/share
desktopdir="$UB_INSTALLDIR"/usr/share/applications
mandir="$UB_INSTALLDIR"/usr/share/man/man1/
vendordir="$UB_INSTALLDIR"/etc/OpenCL/vendors
pixmapdir="$UB_INSTALLDIR"/usr/share/pixmaps/
shnvdir="$UB_INSTALLDIR"/usr/share/nvidia
vdpaudir=$cellibdir/vdpau

#könyvtárgyártás
mkdir -p "$cellibdir"/nvidia \
	"$moduldir" \
	"$xmoduldir"/{drivers,extensions} \
	"$desktopdir" \
	"$mandir" \
	"$vendordir" \
	"$pixmapdir" \
	"$shnvdir" \
	"$vdpaudir"

export NV_USE_BUNDLED_LIBJANSSON=0
alprogi settings
alprogi xconfig
alprogi modprobe
alprogi persistenced

# desktop
mv	settings/doc/nvidia-settings.desktop "$desktopdir"/
mv	settings/doc/nvidia-settings.png "$pixmapdir"/

#kernelmodulok
cp kernel/{nvidia.ko,uvm/nvidia-uvm.ko} "$moduldir"/

# binárisok elhelyezése #nvidia-smi,nvidia-cuda-mps
binaries="nvidia-cuda-mps-control nvidia-smi"
for binari in $binaries;do
    mv $binari $celbindir/
    gunzip ${binari}.1.gz
    mv $binari.1 $mandir/
done

# vendor
mv	nvidia.icd "$vendordir"/

# wrapped-software-rendering lib. Postinstből lehet majd rá libcwfb.so link, ha
# nem ütközik az x.org-server által szállítottal libcwfb.so fájllal
mv libnvidia-wfb.so.${UB_VERSION} $xmoduldir

# biztonságba helyezés a régi módon
mv	libglx.so."$UB_VERSION" "$cellibdir"/nvidia/

#Áthelyezzük a nem a $cellibdir alá kerülő *.so-kat
mv	nvidia_drv.so "$xmoduldir"/drivers/
mv	tls "$cellibdir"

# vdpau cuccok
mv libvdpau_n*.so.${UB_VERSION} $vdpaudir

# minden áthelyezése a libekbe
mv *.so.* "$cellibdir"/

# application profiles
cp nvidia-application-profiles-${UB_VERSION}-rc $shnvdir/
cp nvidia-application-profiles-${UB_VERSION}-key-documentation $shnvdir/

# két videókártyás rendszereknek
mv persistenced/init/systemd/nvidia-persistenced.service.template \
    $UB_INSTALLDIR/usr/lib/systemd/system/nvidia-persistenced.service

#libxnvctrl

cd settings/src/libXNVCtrl
mkdir -p "${UB_INSTALLDIR}"/usr/{include/NVCtrl,lib/pkgconfig}
cp nv_control.h NVCtrl{,Lib}.h "${UB_INSTALLDIR}"/usr/include/NVCtrl/
cp libXNVCtrl.a "${cellibdir}"/

# pc rendberakás
cat <<'EOF' > "${UB_INSTALLDIR}"/usr/lib/pkgconfig/libXNVCtrl.pc
prefix=/usr
libdir=${prefix}/lib
includedir=${prefix}/include/NVCtrl

Name: libXNVCtrl
Description: Library for accessing NV-CONTROL extension in NVIDIA's kurrent drivers.
Version: %version%
Libs: -L${libdir} -lXNVCtrl
Cflags: -I${includedir}
EOF

sed -i -e "s/%version%/$UB_VERSION/" "${UB_INSTALLDIR}"/usr/lib/pkgconfig/libXNVCtrl.pc

#linkgyártások
cd "$cellibdir"
ln -s "libcuda.so.$UB_VERSION" libcuda.so

for i in `ls -1 libnv*`;do
lib=$(echo $i | sed s/\.${UB_VERSION}//g)
solink=$(echo $lib | sed s/so\..*/so/)
ln -s $i $lib.1
ln -s $lib.1 $solink
done

# tls
ln -s libnvidia-tls.so.${UB_VERSION} tls/libnvidia-tls.so.1
ln -s libnvidia-tls.so.1 tls/libnvidia-tls.so

# vdpau
ln -s libvdpau_nvidia.so.${UB_VERSION} vdpau/libvdpau_nvidia.so.1
ln -s libvdpau_nvidia.so.1 vdpau/libvdpau_nvidia.so

# Támogatott chepkhez a verzió beillesztése a csomag leírásába
sed "s/version/${UB_VERSION}/g" -i ${UB_SRCDIR}/packages/nvidia-340/description/hu
