diff -Nur orig/pathological.py mod/pathological.py
--- orig/pathological.py	2019-11-02 20:50:51.000000000 +0100
+++ mod/pathological.py	2020-03-23 19:36:37.700255894 +0100
@@ -1,4 +1,4 @@
-#!/usr/bin/python
+#!/usr/bin/python3
 """
 Copyright (C) 2003  John-Paul Gignac
 
@@ -18,7 +18,7 @@
 """
 
 # Import Modules
-import os, pygame, random, time, math, re, sys, md5
+import os, pygame, random, time, math, re, sys, hashlib
 from pygame.locals import *
 
 # Parse the command line
@@ -39,7 +39,7 @@
 		sound_on = 0
 		music_on = 0
 	elif arg[0] == '-':
-		print "Usage: "+sys.argv[0]+" [-cb] [-f] [-s] [highscores-file]\n"
+		print ("Usage: "+sys.argv[0]+" [-cb] [-f] [-s] [highscores-file]\n")
 		sys.exit(1)
 	else:
 		highscores_file = arg
@@ -101,10 +101,10 @@
 	c = math.floor( 0.5 + math.cos(theta)*holecenter_radius)
 	s = math.floor( 0.5 + math.sin(theta)*holecenter_radius)
 	holecenters.append((
-		(tile_size/2 + s, tile_size/2 - c),
-		(tile_size/2 + c, tile_size/2 + s),
-		(tile_size/2 - s, tile_size/2 + c),
-		(tile_size/2 - c, tile_size/2 - s)))
+		(tile_size//2 + s, tile_size//2 - c),
+		(tile_size//2 + c, tile_size//2 + s),
+		(tile_size//2 - s, tile_size//2 + c),
+		(tile_size//2 - c, tile_size//2 - s)))
 
 # Direction references
 dirs = ((0,-1),(1,0),(0,1),(-1,0))
@@ -122,9 +122,9 @@
 	fullname = os.path.join('graphics', name)
 	try:
 		image = pygame.image.load(fullname)
-	except pygame.error, message:
-		print 'Cannot load image:', fullname
-		raise SystemExit, message
+	except pygame.error as message:
+		print('Cannot load image:', fullname)
+		raise SystemExit(message)
 
 	if size is not None:
 		image = pygame.transform.scale( image, size)
@@ -144,8 +144,8 @@
 	fullname = os.path.join('sounds', name)
 	try:
 		sound = pygame.mixer.Sound(fullname)
-	except pygame.error, message:
-		print 'Cannot load sound:', fullname
+	except pygame.error as message:
+		print('Cannot load sound:', fullname)
 		return NoneSound()
 
 	sound.set_volume( volume * sound_effects_volume)
@@ -165,13 +165,13 @@
 		return
 
 	if not pygame.mixer or not pygame.mixer.music:
-		print "Background music not available."
+		print ("Background music not available.")
 		return
 	fullname = os.path.join('music', name)
 	try:
 		pygame.mixer.music.load(fullname)
-	except pygame.error, message:
-		print 'Cannot load music:', fullname
+	except pygame.error as message:
+		print('Cannot load music:', fullname)
 		return
 	music_loaded = 1
 	pygame.mixer.music.play(-1)
@@ -259,17 +259,17 @@
 def load_images():
 	Marble.images = []
 	for i in range(9):
-		Marble.images.append( load_image('marble-'+`i`+cbext, -1,
-			(marble_size, marble_size)))
+		Marble.images.append( load_image('marble-'+repr(i)+cbext, -1,
+ 			(marble_size, marble_size)))
 
 	Tile.plain_tiles = []
 	Tile.tunnels = []
 	for i in range(16):
 		tile = load_image('tile.png', (206,53,53), (tile_size,tile_size))
-		path = load_image('path-'+`i`+'.png', -1, (tile_size,tile_size))
+		path = load_image('path-'+repr(i)+'.png', -1, (tile_size,tile_size))
 		tile.blit( path, (0,0))
 		Tile.plain_tiles.append( tile)
-		Tile.tunnels.append(load_image('tunnel-'+`i`+'.png',
+		Tile.tunnels.append(load_image('tunnel-'+repr(i)+'.png',
 			-1,(tile_size,tile_size)))
 	Tile.paths = 0
 
@@ -291,12 +291,12 @@
 
 	Painter.images = []
 	for i in range(8):
-		Painter.images.append( load_image('painter-'+`i`+cbext, -1,
+		Painter.images.append( load_image('painter-'+repr(i)+cbext, -1,
 			(tile_size,tile_size)))
 
 	Filter.images = []
 	for i in range(8):
-		Filter.images.append( load_image('filter-'+`i`+cbext, -1,
+		Filter.images.append( load_image('filter-'+repr(i)+cbext, -1,
 			(tile_size,tile_size)))
 
 	Director.images = (
@@ -314,7 +314,7 @@
 		for j in range(4):
 			if i == j: Switch.images[i].append( None)
 			else: Switch.images[i].append( load_image(
-				'switch-'+`i`+`j`+'.png',-1,(tile_size,tile_size)))
+				'switch-'+repr(i)+repr(j)+'.png',-1,(tile_size,tile_size)))
 
 	Replicator.image = load_image('replicator.png',-1,(tile_size,tile_size))
 
@@ -336,7 +336,7 @@
 	Board.launcher_v = load_image('launcher-v.png', None,
 		(marble_size, vert_tiles * tile_size + marble_size))
 	Board.launcher_corner = load_image('launcher-corner.png', (255,0,0),
-		((tile_size-marble_size)/2+marble_size,marble_size))
+		((tile_size-marble_size)//2+marble_size,marble_size))
 	Board.launcher_entrance = load_image('entrance.png', -1,
 		(tile_size,marble_size))
 
@@ -410,7 +410,7 @@
 	def click(self, board, posx, posy, tile_x, tile_y): pass
 
 	def affect_marble(self, board, marble, rpos):
-		if rpos == (tile_size/2,tile_size/2):
+		if rpos == (tile_size//2,tile_size//2):
 			if self.paths & (1 << marble.direction): return
 
 			# Figure out the new direction
@@ -438,8 +438,8 @@
 			for i in range(4):
 				holecenter = holecenters[self.spinpos][i]
 				surface.blit( self.moving_holes[self.completed],
-					(holecenter[0]-marble_size/2+self.rect.left,
-					holecenter[1]-marble_size/2+self.rect.top))
+					(holecenter[0]-marble_size//2+self.rect.left,
+					holecenter[1]-marble_size//2+self.rect.top))
 		else:
 			surface.blit( self.images[self.completed], self.rect.topleft)
 
@@ -448,8 +448,8 @@
 			if color >= 0:
 				holecenter = holecenters[self.spinpos][i]
 				surface.blit( Marble.images[color],
-					(holecenter[0]-marble_size/2+self.rect.left,
-					holecenter[1]-marble_size/2+self.rect.top))
+					(holecenter[0]-marble_size//2+self.rect.left,
+					holecenter[1]-marble_size//2+self.rect.top))
 
 		return 1
 
@@ -534,10 +534,10 @@
 
 	def affect_marble(self, board, marble, rpos):
 		# Watch for marbles entering
-		if rpos[0]+marble_size/2 == wheel_margin or \
-			rpos[0]-marble_size/2 == tile_size - wheel_margin or \
-			rpos[1]+marble_size/2 == wheel_margin or \
-			rpos[1]-marble_size/2 == tile_size - wheel_margin:
+		if rpos[0]+marble_size//2 == wheel_margin or \
+			rpos[0]-marble_size//2 == tile_size - wheel_margin or \
+			rpos[1]+marble_size//2 == wheel_margin or \
+			rpos[1]-marble_size//2 == tile_size - wheel_margin:
 			if self.spinpos or self.marbles[marble.direction^2] >= -1:
 				# Reject the marble
 				marble.direction = marble.direction ^ 2
@@ -614,8 +614,8 @@
 		if color >= 0:
 			holecenter = self.rect.center
 			surface.blit( Marble.images[color],
-				(holecenter[0]-marble_size/2,
-				holecenter[1]-marble_size/2))
+				(holecenter[0]-marble_size//2,
+				holecenter[1]-marble_size//2))
 		else:
 			surface.blit( self.bottom, self.rect.topleft)
 
@@ -629,10 +629,10 @@
 
 	def affect_marble(self, board, marble, rpos):
 		# Watch for marbles entering
-		if (rpos[0]+marble_size == tile_size/2 and marble.direction == 1) or \
-			(rpos[0]-marble_size == tile_size/2 and marble.direction == 3) or \
-			(rpos[1]+marble_size == tile_size/2 and marble.direction == 2) or \
-			(rpos[1]-marble_size == tile_size/2 and marble.direction == 0):
+		if (rpos[0]+marble_size == tile_size//2 and marble.direction == 1) or \
+			(rpos[0]-marble_size == tile_size//2 and marble.direction == 3) or \
+			(rpos[1]+marble_size == tile_size//2 and marble.direction == 2) or \
+			(rpos[1]-marble_size == tile_size//2 and marble.direction == 0):
 
 			if self.entering is not None:
 				# Bump the marble that is currently entering
@@ -644,7 +644,7 @@
 
 				# Let the base class affect the marble
 				Tile.affect_marble(self, board, newmarble,
-					(tile_size/2,tile_size/2))
+					(tile_size//2,tile_size//2))
 			elif self.marble >= 0:
 				# Bump the marble that is currently caught
 				newmarble = Marble( self.marble, self.rect.center, marble.direction)
@@ -655,7 +655,7 @@
 
 				# Let the base class affect the marble
 				Tile.affect_marble(self, board, newmarble,
-					(tile_size/2,tile_size/2))
+					(tile_size//2,tile_size//2))
 
 				self.marble = -1
 				self.drawn = 0
@@ -663,7 +663,7 @@
 			# Remember which marble is on its way in
 			self.entering = marble
 
-		elif rpos == (tile_size/2, tile_size/2):
+		elif rpos == (tile_size//2, tile_size//2):
 			# Catch this marble
 			self.marble = marble.color
 			board.marbles.remove( marble)
@@ -682,7 +682,7 @@
 
 	def affect_marble(self, board, marble, rpos):
 		Tile.affect_marble( self, board, marble, rpos)
-		if rpos == (tile_size/2, tile_size/2):
+		if rpos == (tile_size//2, tile_size//2):
 			if marble.color != self.color:
 				# Change the color
 				marble.color = self.color
@@ -699,7 +699,7 @@
 		return 0
 
 	def affect_marble(self, board, marble, rpos):
-		if rpos == (tile_size/2, tile_size/2):
+		if rpos == (tile_size//2, tile_size//2):
 			# If the color is wrong, bounce the marble
 			if marble.color != self.color and marble.color != 8:
 				marble.direction = marble.direction ^ 2
@@ -719,7 +719,7 @@
 		return 0
 
 	def affect_marble(self, board, marble, rpos):
-		if rpos == (tile_size/2, tile_size/2):
+		if rpos == (tile_size//2, tile_size//2):
 			marble.direction = self.direction
 			play_sound( direct_marble)
 
@@ -733,7 +733,7 @@
 		return 0
 
 	def affect_marble(self, board, marble, rpos):
-		if rpos == (tile_size/2, tile_size/2):
+		if rpos == (tile_size//2, tile_size//2):
 			board.marbles.remove( marble)
 			play_sound( shredder)
 
@@ -760,7 +760,7 @@
 		return rc
 
 	def affect_marble(self, board, marble, rpos):
-		if rpos == (tile_size/2, tile_size/2):
+		if rpos == (tile_size//2, tile_size//2):
 			marble.direction = self.curdir
 			self.switch()
 
@@ -796,7 +796,7 @@
 
 	def affect_marble(self, board, marble, rpos):
 		Tile.affect_marble( self, board, marble, rpos)
-		if rpos == (tile_size/2, tile_size/2):
+		if rpos == (tile_size//2, tile_size//2):
 			# Add the marble to the pending list
 			self.pending.append( [marble.color,marble.direction,
 				self.count - 1, replicator_delay]);
@@ -819,7 +819,7 @@
 		other.other = self
 
 	def affect_marble(self, board, marble, rpos):
-		if rpos == (tile_size/2, tile_size/2):
+		if rpos == (tile_size//2, tile_size//2):
 			marble.rect.center = self.other.rect.center
 			play_sound( teleport)
 
@@ -853,8 +853,8 @@
 		if self.marbles is not None:
 			for i in range(4):
 				surface.blit( Marble.images[self.marbles[i]],
-					(holecenters[0][i][0]+self.rect.left-marble_size/2,
-					 holecenters[0][i][1]+self.rect.top-marble_size/2))
+					(holecenters[0][i][0]+self.rect.left-marble_size//2,
+					 holecenters[0][i][1]+self.rect.top-marble_size//2))
 		return 1
 
 	def complete(self, board):
@@ -912,7 +912,7 @@
 		# Create the board array
 		self.tiles = []
 		for j in range( vert_tiles):
-			row = range( horiz_tiles)
+			row = list(range( horiz_tiles))
 			self.tiles.append( row)
 
 		# Load the level
@@ -924,21 +924,21 @@
 			# Compute a hash of the current level, involving
 			# a static timestamp.  This provides a consistent,
 			# backtrackable pseudo-random function.
-			hash = md5.new(`game.gamestart`+"/"+`game.level`).digest()
+			hash = hashlib.md5((repr(game.gamestart)+"/"+repr(game.level)).encode()).digest()
 			hashval = (ord(hash[0]) + (ord(hash[1]) << 8) + \
 				(ord(hash[2]) << 16) + (ord(hash[3]) << 24)) & 32767;
 			self._load( game.circuit, hashval % game.numlevels);
 
 		# Create the launch timer text object
 		self.launch_timer_text = launch_timer_font.render(
-			`self.launch_timer`, 1, (255,255,255))
+			repr(self.launch_timer), 1, (255,255,255))
 		self.launch_timer_text_rect = self.launch_timer_text.get_rect()
-		self.launch_timer_text_rect.centerx = launch_timer_pos[0]+timer_width/2+1
+		self.launch_timer_text_rect.centerx = launch_timer_pos[0]+timer_width//2+1
 		self.launch_timer_text_rect.bottom = \
 			launch_timer_pos[1] + timer_height - timer_margin
 
 		# Fill up the launch queue
-		for i in range( vert_tiles * tile_size / marble_size + 2):
+		for i in range( vert_tiles * tile_size // marble_size + 2):
 			self.launch_queue.append(random.choice(self.colors))
 
 		# Create The Background
@@ -960,11 +960,11 @@
 				self.background.blit( self.launcher_entrance, 
 					(board_pos[0]+tile_size*i, board_pos[1]-marble_size))
 		self.background.blit( self.launcher_corner,
-			(board_pos[0]+horiz_tiles*tile_size-(tile_size-marble_size)/2,
+			(board_pos[0]+horiz_tiles*tile_size-(tile_size-marble_size)//2,
 			board_pos[1] - marble_size))
 
 		# Draw the board name
-		board_name = `self.game.level+1` + " - " + self.name
+		board_name = repr(self.game.level+1) + " - " + self.name
 		if self.game.level >= self.game.numlevels:
 			board_name += " (Random)"
 		text = info_font.render( board_name, 1, (0,0,0))
@@ -998,7 +998,7 @@
 				timer_width-timer_margin*2,height))
 			dirty_rects.append( rect)
 		else:
-			height = timer_height*self.launch_timeout/self.launch_timeout_start
+			height = timer_height*self.launch_timeout//self.launch_timeout_start
 			if height < self.launch_timer_height:
 				rect = (launch_timer_pos[0] + timer_margin,
 					launch_timer_pos[1] + timer_height - self.launch_timer_height,
@@ -1017,15 +1017,15 @@
 		dirty_rects.append( rect)
 
 		# Draw the score
-		text = "Score: "+("00000000"+`self.game.score`)[-8:]
+		text = "Score: "+("00000000"+repr(self.game.score))[-8:]
 		text = info_font.render( text, 1, (0,0,0))
 		rect = text.get_rect()
 		rect.left = self.score_pos
 		self.screen.blit( text, rect)
 
 		# Draw the board timer
-		time_remaining = (self.board_timeout+frames_per_sec-1)/frames_per_sec
-		text = `time_remaining/60`+":"+("00"+`time_remaining%60`)[-2:]
+		time_remaining = (self.board_timeout+frames_per_sec-1)//frames_per_sec
+		text = repr(time_remaining//60)+":"+("00"+repr(time_remaining%60))[-2:]
 		text = info_font.render( text, 1, (0,0,0))
 		rect = text.get_rect()
 		rect.left = self.board_timer_pos
@@ -1035,7 +1035,7 @@
 		right_edge = self.board_timer_pos - 32
 		for i in range(self.game.lives - 1):
 			rect = self.life_marble.get_rect()
-			rect.centery = info_height / 2
+			rect.centery = info_height // 2
 			rect.right = right_edge
 			self.screen.blit( self.life_marble, rect)
 			right_edge -= rect.width + 4
@@ -1044,11 +1044,11 @@
 		num_marbles = len(self.marbles)
 		if num_marbles > self.live_marbles_limit:
 			num_marbles = self.live_marbles_limit
-		text = `num_marbles`+"/"+`self.live_marbles_limit`
+		text = repr(num_marbles)+"/"+repr(self.live_marbles_limit)
 		text = active_marbles_font.render( text, 1, (40,40,40))
 		rect = text.get_rect()
 		rect.left = self.pos[0] + 8
-		rect.centery = self.pos[1] - marble_size / 2
+		rect.centery = self.pos[1] - marble_size // 2
 		rect.width += 100
 		self.screen.set_clip( rect)
 		self.screen.blit( self.background, (0,0))
@@ -1163,7 +1163,7 @@
 	def set_launch_timer(self, passes):
 		self.launch_timer = passes
 		self.launch_timeout_start = (marble_size +
-			(horiz_tiles * tile_size - marble_size) * passes) / marble_speed
+			(horiz_tiles * tile_size - marble_size) * passes) // marble_speed
 		self.launch_timer_height = None
 
 	def set_board_timer(self, seconds):
@@ -1174,8 +1174,8 @@
 	def launch_marble(self):
 		self.launch_queue.append(random.choice(self.colors))
 		self.marbles.insert( 0, Marble( self.launch_queue[0],
-			(self.pos[0]+tile_size*horiz_tiles+marble_size/2,
-			self.pos[1]-marble_size/2), 3))
+			(self.pos[0]+tile_size*horiz_tiles+marble_size//2,
+			self.pos[1]-marble_size//2), 3))
 		del self.launch_queue[0]
 		self.launched = 1
 
@@ -1188,15 +1188,15 @@
 		cy = c[1] - self.pos[1]
 
 		# Bounce marbles off of the top
-		if cy == marble_size/2:
+		if cy == marble_size//2:
 			marble.direction = 2
 			return
 
 		if cy < 0:
-			if cx == marble_size/2:
+			if cx == marble_size//2:
 				marble.direction = 1
 				return
-			if cx == tile_size * horiz_tiles - marble_size/2 \
+			if cx == tile_size * horiz_tiles - marble_size//2 \
 				and marble.direction == 1:
 				marble.direction = 3
 				return
@@ -1205,11 +1205,11 @@
 			effective_cx = cx
 			effective_cy = cy + marble_size
 		else:
-			effective_cx = cx + marble_size/2 * dirs[marble.direction][0]
-			effective_cy = cy + marble_size/2 * dirs[marble.direction][1]
+			effective_cx = cx + marble_size//2 * dirs[marble.direction][0]
+			effective_cy = cy + marble_size//2 * dirs[marble.direction][1]
 
-		tile_x = effective_cx / tile_size
-		tile_y = effective_cy / tile_size
+		tile_x = effective_cx // tile_size
+		tile_y = effective_cy // tile_size
 		tile_xr = cx - tile_x * tile_size
 		tile_yr = cy - tile_y * tile_size
 
@@ -1219,7 +1219,7 @@
 
 		if cy < 0 and marble.direction != 2:
 			# The special case of new marbles at the top
-			if tile_xr == tile_size / 2 and (tile.paths & 1):
+			if tile_xr == tile_size // 2 and (tile.paths & 1):
 				if isinstance( tile, Wheel):
 					if tile.spinpos > 0 or tile.marbles[0] != -3: return
 					tile.marbles[0] = -2
@@ -1233,8 +1233,8 @@
 
 	def click(self, pos):
 		# Determine which tile the pointer is in
-		tile_x = (pos[0] - self.pos[0]) / tile_size
-		tile_y = (pos[1] - self.pos[1]) / tile_size
+		tile_x = (pos[0] - self.pos[0]) // tile_size
+		tile_y = (pos[1] - self.pos[1]) // tile_size
 		tile_xr = pos[0] - self.pos[0] - tile_x * tile_size
 		tile_yr = pos[1] - self.pos[1] - tile_y * tile_size
 		if tile_x >= 0 and tile_x < horiz_tiles and \
@@ -1487,16 +1487,16 @@
 		except:
 			try:
 				f = os.popen(write_highscores, "w")
-			except OSError, message:
-				print "Warning: Can't save highscores:", message
+			except OSError as message:
+				print("Warning: Can't save highscores:", message)
 				return
 
 		try:
 			for i in self.scores:
-				f.write( `i[0]`+' '+i[1]+' '+`i[2]`+' '+i[3]+'\n')
+				f.write( repr(i[0])+' '+i[1]+' '+repr(i[2])+' '+i[3]+'\n')
 			f.close()
 		except:
-			print "Warning: Problem saving highscores."
+			print ("Warning: Problem saving highscores.")
 
 def wait_one_sec():
 	time.sleep(1)
@@ -1576,7 +1576,7 @@
 			if line == '': break
 			if line[0] == '|': j += 1
 		f.close()
-		self.numlevels = j / vert_tiles
+		self.numlevels = j // vert_tiles
 
 		self.level = 0
 		self.score = 0
@@ -1589,7 +1589,7 @@
 		self.score += amount
 
 		# Award any extra lives that are due
-		extra_lives = amount / extra_life_frequency + \
+		extra_lives = amount // extra_life_frequency + \
 			(self.score % extra_life_frequency < amount % extra_life_frequency)
 		extra_lives = min( extra_lives, max_spare_lives+1 - self.lives)
 		if extra_lives > 0:
@@ -1649,7 +1649,7 @@
 						"You have a highscore!\n"+
 						"Please enter your name:", (300, 180))
 					name = get_name( self.screen, popup_font,
-						((screen_width-250)/2,310,250,popup_font.get_height()),
+						((screen_width-250)//2,310,250,popup_font.get_height()),
 						(255,255,255), (0,0,0))
 					if name is None: return -1
 
@@ -1668,7 +1668,7 @@
 				# The board was completed
 
 				# Compute time remaining bonus
-				time_remaining = 100 * board.board_timeout / \
+				time_remaining = 100 * board.board_timeout // \
 					board.board_timeout_start
 				time_bonus = 5 * time_remaining
 
@@ -1681,16 +1681,16 @@
 							total_holes += 4
 							for i in tile.marbles:
 								if i < 0: empty_holes += 1
-				empty_holes = (100 * empty_holes + total_holes/2) / total_holes
+				empty_holes = (100 * empty_holes + total_holes/2) // total_holes
 				holes_bonus = 2 * empty_holes
 
 				self.increase_score( time_bonus + holes_bonus)
 
 				message = 'Level Complete!\n'+ \
-					"Bonus for " + `time_remaining` + "% time remaining: " + \
-					`time_bonus` + "\n" + \
-					"Bonus for " + `empty_holes` + "% holes empty: " + \
-					`holes_bonus` + '\nClick to continue.'
+					"Bonus for " + repr(time_remaining) + "% time remaining: " + \
+					repr(time_bonus) + "\n" + \
+					"Bonus for " + repr(empty_holes) + "% holes empty: " + \
+					repr(holes_bonus) + '\nClick to continue.'
 
 				rc = self.board_dialog( message, 1, 1)
 				self.level += 1
@@ -1772,7 +1772,7 @@
 	return key
 
 def get_name( screen, font, cursor_box, backcol, forecol):
-	cursor_width = cursor_box[3] / 3
+	cursor_width = cursor_box[3] // 3
 	cursor_pos = [cursor_box[0], cursor_box[1], cursor_width, cursor_box[3]]
 	name = ""
 
@@ -1830,7 +1830,7 @@
 	menu = ("Start Game", "High Scores", "Fullscreen:", "Music:",
 		"Sound Effects:", "Quit Game")
 	menu_width = 240
-	menu_pos = ((800 - menu_width)/2, 145)
+	menu_pos = ((800 - menu_width)//2, 145)
 	menu_font_height = 32
 	menu_color = (255,255,255)
 	menu_cursor_color = (60,60,60)
@@ -2042,7 +2042,7 @@
 					if pos[0] < self.menu_pos[0]: continue
 					if pos[0] >= self.menu_pos[0] + self.menu_width: continue
 					if pos[1] < self.menu_pos[1]: continue
-					i = (pos[1] - self.menu_pos[1]) / self.menu_font_height
+					i = (pos[1] - self.menu_pos[1]) // self.menu_font_height
 					if i >= len(self.menu): continue
 
 					rc = self.menu_select( i)
@@ -2079,7 +2079,7 @@
 
 	hs_font_height = 24
 	hs_width = 320
-	hs_pos = ((800-hs_width)/2, 114)
+	hs_pos = ((800-hs_width)//2, 114)
 	hs_margin = 8
 	hs_column_margin = 70
 	hs_score_width = 70
@@ -2133,7 +2133,7 @@
 				numcolor = color = self.hs_current_color
 
 			y += self.hs_font_height
-			number = self.hs_font.render(`j+1`+'.',1,numcolor)
+			number = self.hs_font.render(repr(j+1)+'.',1,numcolor)
 			self.screen.blit( number,
 				(x + number_width - number.get_size()[0], y))
 			if i[3] != '':
@@ -2141,9 +2141,9 @@
 				if name.get_width() > name_width:
 					name = name.subsurface( (0,0,name_width,name.get_height()))
 				self.screen.blit( name, (x + name_left, y))
-			level = self.hs_font.render( `i[2]`, 1, color)
+			level = self.hs_font.render( repr(i[2]), 1, color)
 			self.screen.blit( level, (x + level_right - level.get_width(), y))
-			score = self.hs_font.render( `i[0]`, 1, color)
+			score = self.hs_font.render( repr(i[0]), 1, color)
 			self.screen.blit( score, (x + score_right - score.get_width(), y))
 
 		self.dirty_rects.append( self.hs_rect)
@@ -2159,8 +2159,8 @@
 	# Initialize the game module
 	pygame.init()
 
-	if not pygame.font: print 'Warning, fonts disabled'
-	if not pygame.mixer: print 'Warning, sound disabled'
+	if not pygame.font: print ('Warning, fonts disabled')
+	if not pygame.mixer: print ('Warning, sound disabled')
 
 	set_video_mode()
 	load_sounds()
