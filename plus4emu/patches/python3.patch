From d229de9a5f6630bc2dac9341dd947ba683fabf95 Mon Sep 17 00:00:00 2001
From: IstvanV <istvan-v@users.noreply.github.com>
Date: Tue, 17 Sep 2019 21:37:42 +0200
Subject: [PATCH] Fixed building with Python 3, and environment variables on
 Windows

---
 SConstruct | 30 +++++++++++++++++-------------
 1 file changed, 17 insertions(+), 13 deletions(-)

diff --git a/SConstruct b/SConstruct
index 06ad047..1d889b1 100644
--- a/SConstruct
+++ b/SConstruct
@@ -1,5 +1,6 @@
 # vim: syntax=python
 
+from __future__ import print_function
 import sys, os
 
 win64CrossCompile = int(ARGUMENTS.get('win64', 0))
@@ -77,17 +78,17 @@ def configurePackage(env, pkgName):
     if not disablePkgConfig:
         for s in packageConfigs[pkgName][1]:
             if not s:
-                print 'Checking for package ' + pkgName + '...',
+                print('Checking for package ' + pkgName + '...', end = ' ')
                 # hack to work around fltk-config adding unwanted compiler flags
                 savedCFlags = env['CCFLAGS']
                 savedCXXFlags = env['CXXFLAGS']
             else:
-                print 'Checking for package ' + s + '...',
+                print('Checking for package ' + s + '...', end = ' ')
                 s = ' ' + s
             try:
                 if not env.ParseConfig(packageConfigs[pkgName][0] + s):
                     raise Exception()
-                print 'yes'
+                print('yes')
                 if not s:
                     env['CCFLAGS'] = savedCFlags
                     env['CXXFLAGS'] = savedCXXFlags
@@ -95,7 +96,7 @@ def configurePackage(env, pkgName):
                         env['CPPDEFINES'].remove(['_FORTIFY_SOURCE', '2'])
                 return 1
             except:
-                print 'no'
+                print('no')
                 continue
         pkgFound = 0
     else:
@@ -110,9 +111,9 @@ def configurePackage(env, pkgName):
                 packageConfigs[pkgName][2 + int(bool(mingwCrossCompile))])
     if not pkgFound:
         if not packageConfigs[pkgName][6]:
-            print ' *** error configuring ' + pkgName
+            print(' *** error configuring ' + pkgName)
             Exit(-1)
-        print 'WARNING: package ' + pkgName + ' not found'
+        print('WARNING: package ' + pkgName + ' not found')
         return 0
     return 1
 
@@ -143,9 +144,11 @@ if not mingwCrossCompile:
     instConfDir = instDataDir + "/config"
     instDiskDir = instDataDir + "/disk"
     programNamePrefix = "p4"
+    plus4emuLibEnvironment = Environment(ENV = { 'PATH' : os.environ['PATH'],
+                                                 'HOME' : os.environ['HOME'] })
+else:
+    plus4emuLibEnvironment = Environment(ENV = { 'PATH' : os.environ['PATH'] })
 
-plus4emuLibEnvironment = Environment(ENV = { 'PATH' : os.environ['PATH'],
-                                             'HOME' : os.environ['HOME'] })
 if linux32CrossCompile:
     compilerFlags = ' -m32 ' + compilerFlags
 plus4emuLibEnvironment.Append(CCFLAGS = Split(compilerFlags))
@@ -218,14 +221,14 @@ if configurePackage(plus4emuGLGUIEnvironment, 'FLTK-GL'):
             if not configure.CheckType('PFNGLCOMPILESHADERPROC',
                                        '#include <GL/gl.h>\n'
                                        + '#include <GL/glext.h>'):
-                print 'WARNING: disabling GL shader support'
+                print('WARNING: disabling GL shader support')
                 enableGLShaders = 0
     configure.Finish()
 if sys.platform[:5] == 'linux' and not mingwCrossCompile:
     plus4emuGUIEnvironment.Append(LIBS = ['X11'])
     plus4emuGLGUIEnvironment.Append(LIBS = ['GL', 'X11'])
 if disableOpenGL:
-    print 'WARNING: OpenGL is not found, only software video will be supported'
+    print('WARNING: OpenGL is not found, only software video will be supported')
     enableGLShaders = 0
     plus4emuGLGUIEnvironment = plus4emuGUIEnvironment.Clone()
     plus4emuGLGUIEnvironment.Append(CCFLAGS = ['-DDISABLE_OPENGL_DISPLAY'])
@@ -264,7 +267,7 @@ if configure.CheckType('PaStreamCallbackTimeInfo', '#include <portaudio.h>'):
     havePortAudioV19 = 1
 else:
     havePortAudioV19 = 0
-    print 'WARNING: using old v18 PortAudio interface'
+    print('WARNING: using old v18 PortAudio interface')
 fltkVersion13 = 0
 if configure.CheckCXXHeader('FL/Fl_Cairo.H'):
     fltkVersion13 = 1
@@ -301,8 +304,9 @@ def fluidCompile(flNames):
         if flName.endswith('.fl'):
             cppName = flName[:-3] + '_fl.cpp'
             hppName = flName[:-3] + '_fl.hpp'
-            Command([cppName, hppName], flName,
-                    'fluid -c -o %s -h %s $SOURCES' % (cppName, hppName))
+            plus4emuLibEnvironment.Command(
+                [cppName, hppName], flName,
+                'fluid -c -o %s -h %s $SOURCES' % (cppName, hppName))
             cppNames += [cppName]
     return cppNames
 
