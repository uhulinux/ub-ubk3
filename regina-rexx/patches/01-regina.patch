diff -Nur orig/configur.h mod/configur.h
--- orig/configur.h	2021-10-23 22:58:14.000000000 +0200
+++ mod/configur.h	2021-11-13 20:15:36.026436331 +0100
@@ -683,7 +683,7 @@
 #if defined(_AMIGA) || defined(__AROS__)
 # define DEFAULT_AREXX_SEMANTICS        1
 #else
-# define DEFAULT_AREXX_SEMANTICS        0
+# define DEFAULT_AREXX_SEMANTICS        1
 #endif
 /*
  * Indicates that AREXX BIFs are available by default on Amiga and AROS, but
@@ -692,7 +692,7 @@
 #if defined(_AMIGA) || defined(__AROS__)
 # define DEFAULT_AREXX_BIFS             1
 #else
-# define DEFAULT_AREXX_BIFS             0
+# define DEFAULT_AREXX_BIFS             1
 #endif
 /*
  * Indicates if the user want the "broken" semantics of ADDRESS COMMAND
diff -Nur orig/makefile.com mod/makefile.com
--- orig/makefile.com	2020-04-14 23:58:53.000000000 +0200
+++ mod/makefile.com	2021-11-13 20:18:01.831022372 +0100
@@ -10,11 +10,11 @@
 #   PROGNAME  What to call the compiled	program
 #
 .SUFFIXES: .l .y
-TOPDIR = /usr/local
+TOPDIR = /usr
 BINDIR = $(TOPDIR)/bin
 LIBDIR = $(TOPDIR)/lib
 MANEXT = l
-MANDIR = $(TOPDIR)/man/man$(MANEXT)
+MANDIR = $(TOPDIR)/share/man/man$(MANEXT)
 
 include $(SRCDIR)\regina.ver
 VERDOT = $(VER_DOT)
diff -Nur orig/Makefile.in mod/Makefile.in
--- orig/Makefile.in	2021-11-01 05:24:34.000000000 +0100
+++ mod/Makefile.in	2021-11-13 20:19:55.323456734 +0100
@@ -1077,12 +1077,8 @@
 	$(INSTALL) -m 644 -c ./pl.mtb $(DESTDIR)$(sharedir)/pl.mtb
 	$(INSTALL) -m 644 -c ./tr.mtb $(DESTDIR)$(sharedir)/tr.mtb
 	$(INSTALL) -m 644 -c ./sv.mtb $(DESTDIR)$(sharedir)/sv.mtb
-	$(INSTALL) -m 755 $(srcdir)/demo/rexxcps.rexx  $(DESTDIR)$(examplesdir)/rexxcps.rexx
-	$(INSTALL) -m 755 $(srcdir)/demo/animal.rexx   $(DESTDIR)$(examplesdir)/animal.rexx
-	$(INSTALL) -m 755 $(srcdir)/demo/block.rexx    $(DESTDIR)$(examplesdir)/block.rexx
-	$(INSTALL) -m 755 $(srcdir)/demo/dateconv.rexx $(DESTDIR)$(examplesdir)/dateconv.rexx
-	$(INSTALL) -m 755 $(srcdir)/demo/timeconv.rexx $(DESTDIR)$(examplesdir)/timeconv.rexx
-	$(INSTALL) -m 755 $(srcdir)/demo/newstr.rexx   $(DESTDIR)$(examplesdir)/newstr.rexx
+	$(INSTALL) -m 644 -c $(srcdir)/demo/extqueue.rexx $(DESTDIR)$(sharedir)/
+	$(INSTALL) -m 644 -c $(srcdir)/demo/gci-try.rexx $(DESTDIR)$(sharedir)/
 
 installdoc:
 	$(INSTALL) -m 644 -c ./doc/regina.pdf $(DESTDIR)/$(PACKAGE)-$(VERDOTUNQUOTED)-doc.pdf
diff -Nur orig/os2funcs.c mod/os2funcs.c
--- orig/os2funcs.c	2015-04-04 07:19:54.000000000 +0200
+++ mod/os2funcs.c	2021-11-13 20:56:43.176826007 +0100
@@ -218,6 +218,9 @@
 #elif defined(__WINS__) || defined(__EPOC32__)
    beep( freq, dur );
 #endif
+#ifdef __LINUX__
+   linux_beep( freq, dur );
+#endif
    return nullstringptr();
 }
 
@@ -269,3 +272,162 @@
    FreeTSD( inpath );
    return result;
 }
+
+#ifdef __LINUX__
+#ifndef CLOCK_TICK_RATE
+#define CLOCK_TICK_RATE 1193180
+#endif
+/*
+#define VERSION_STRING "beep-1.2.2"
+char *copyright = 
+"Copyright (C) Johnathan Nightingale, 2002.  "
+"Use and Distribution subject to GPL.  "
+"For information: http://www.gnu.org/copyleft/.";
+*/
+
+/*#include <sys/ioctl.h>*/
+#include <linux/kd.h>
+
+/* Meaningful Defaults */
+#define DEFAULT_FREQ       440.0 /* Middle A */
+#define DEFAULT_LENGTH     200   /* milliseconds */
+#define DEFAULT_REPS       1
+#define DEFAULT_DELAY      100   /* milliseconds */
+#define DEFAULT_END_DELAY  NO_END_DELAY
+#define DEFAULT_STDIN_BEEP NO_STDIN_BEEP
+
+/* Other Constants */
+#define NO_END_DELAY    0
+#define YES_END_DELAY   1
+
+#define NO_STDIN_BEEP   0
+#define LINE_STDIN_BEEP 1
+#define CHAR_STDIN_BEEP 2
+
+typedef struct beep_parms_t {
+  float freq;     /* tone frequency (Hz)      */
+  int length;     /* tone length    (ms)      */
+  int reps;       /* # of repetitions         */
+  int delay;      /* delay between reps  (ms) */
+  int end_delay;  /* do we delay after last rep? */
+  int stdin_beep; /* are we using stdin triggers?  We have three options:
+                     - just beep and terminate (default)
+                     - beep after a line of input
+                     - beep after a character of input
+                     In the latter two cases, pass the text back out again,
+                     so that beep can be tucked appropriately into a text-
+                     processing pipe.
+                  */
+  struct beep_parms_t *next;  /* in case -n/--new is used. */
+} beep_parms_t;
+
+/* Momma taught me never to use globals, but we need something the signal 
+   handlers can get at.*/
+int console_fd = -1;
+
+// /* If we get interrupted, it would be nice to not leave the speaker beeping in
+//    perpetuity. */
+// void handle_signal(int signum) {
+//   switch(signum) {
+//   case SIGINT:
+//     if(console_fd >= 0) {
+//       /* Kill the sound, quit gracefully */
+//       ioctl(console_fd, KIOCSOUND, 0);
+//       close(console_fd);
+//       exit(signum);
+//     } else {
+//       /* Just quit gracefully */
+//       exit(signum);
+//     }
+//   }
+// }
+
+void play_beep(beep_parms_t parms) {
+  int i; /* loop counter */
+
+  /* try to snag the console */
+  if((console_fd = open("/dev/console", O_WRONLY)) == -1) {
+    //fprintf(stderr, "Could not open /dev/console for writing.\n");
+    printf("\a");  /* Output the only beep we can, in an effort to fall back on usefulness */
+    //perror("open");
+    //exit(1);
+    return;
+  }
+  
+  /* Beep */
+  for (i = 0; i < parms.reps; i++) {                    /* start beep */
+    if(ioctl(console_fd, KIOCSOUND, (int)(CLOCK_TICK_RATE/parms.freq)) < 0) {
+      printf("\a");  /* Output the only beep we can, in an effort to fall back on usefulness */
+      perror("ioctl");
+    }
+    /* Look ma, I'm not ansi C compatible! */
+    usleep(1000*parms.length);                          /* wait...    */
+    ioctl(console_fd, KIOCSOUND, 0);                    /* stop beep  */
+    if(parms.end_delay || (i+1 < parms.reps))
+       usleep(1000*parms.delay);                        /* wait...    */
+  }                                                     /* repeat.    */
+
+  close(console_fd);
+}
+
+int linux_beep(int hz, int dur)
+{
+  char sin[4096], *ptr;
+  
+  beep_parms_t *parms = (beep_parms_t *)malloc(sizeof(beep_parms_t));
+  parms->freq       = DEFAULT_FREQ;
+  parms->length     = DEFAULT_LENGTH;
+  parms->reps       = DEFAULT_REPS;
+  parms->delay      = DEFAULT_DELAY;
+  parms->end_delay  = DEFAULT_END_DELAY;
+  parms->stdin_beep = DEFAULT_STDIN_BEEP;
+  parms->next       = NULL;
+  if (hz)
+  {
+    parms->freq       = hz;
+    parms->length     = dur;
+  }
+
+  //signal(SIGINT, handle_signal);
+
+  /* this outermost while loop handles the possibility that -n/--new has been
+     used, i.e. that we have multiple beeps specified. Each iteration will
+     play, then free() one parms instance. */
+  while(parms) {
+    beep_parms_t *next = parms->next;
+
+    if(parms->stdin_beep) {
+      /* in this case, beep is probably part of a pipe, in which case POSIX 
+         says stdin and out should be fuly buffered.  This however means very 
+         laggy performance with beep just twiddling it's thumbs until a buffer
+         fills. Thus, kill the buffering.  In some situations, this too won't 
+         be enough, namely if we're in the middle of a long pipe, and the 
+         processes feeding us stdin are buffered, we'll have to wait for them,
+         not much to  be done about that. */
+      setvbuf(stdin, NULL, _IONBF, 0);
+      setvbuf(stdout, NULL, _IONBF, 0);
+      while(fgets(sin, 4096, stdin)) {
+        if(parms->stdin_beep==CHAR_STDIN_BEEP) {
+          for(ptr=sin;*ptr;ptr++) {
+            putchar(*ptr);
+            fflush(stdout);
+            play_beep(*parms);
+          }
+        } else {
+          fputs(sin, stdout);
+          play_beep(*parms);
+        }
+      }
+    } else {
+      play_beep(*parms);
+    }
+
+    /* Junk each parms struct after playing it */
+    free(parms);
+    parms = next;
+  }
+  return 0;
+}
+
+#endif
+
