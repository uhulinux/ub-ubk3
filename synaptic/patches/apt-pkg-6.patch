From 3a59506bca718c800bb0a3a899b7985140b31703 Mon Sep 17 00:00:00 2001
From: Julian Andres Klode <julian.klode@canonical.com>
Date: Sat, 7 Mar 2020 13:40:03 +0100
Subject: [PATCH] Port to APT 1.9.11: Use pkgCacheFile instead of manually
 opening cache

The MMap class symbol became hidden in apt 1.9.11, causing synaptic
to fail to link. Use pkgCacheFile instead of redoing all work ourselves.

Closes: #953311
---
 common/rpackagecache.cc  | 62 +++++-----------------------------------
 common/rpackagecache.h   | 21 ++++----------
 common/rpackagelister.cc |  4 +--
 3 files changed, 15 insertions(+), 72 deletions(-)

diff --git a/common/rpackagecache.cc b/common/rpackagecache.cc
index 0ff9a525..71cdbe3d 100644
--- a/common/rpackagecache.cc
+++ b/common/rpackagecache.cc
@@ -37,7 +37,7 @@
 #include <apt-pkg/fileutl.h>
 
 
-bool RPackageCache::open(OpProgress &progress, bool locking)
+bool RPackageCache::open(OpProgress *progress, bool locking)
 {
    if(locking)
       lock();
@@ -45,61 +45,13 @@ bool RPackageCache::open(OpProgress &progress, bool locking)
    if (_error->PendingError())
       return false;
 
-   // delete any old structures
-   if(_dcache)
-      delete _dcache;
-   if(_policy)
-      delete _policy;
-   if(_cache)
-      delete _cache;
-   if(_map)
-      delete _map;
-
-   // Read the source list
-   //pkgSourceList list;
-   assert(_list != NULL);
-   if (!_list->ReadMainList())
-      return _error->Error(_("The list of sources could not be read.\n"
-			     "Go to the repository dialog to correct the problem."));
+   cache.Close();
 
-   if(locking)
-      pkgCacheGenerator::MakeStatusCache(*_list, &progress, nullptr, false);
-   else
-      pkgCacheGenerator::MakeStatusCache(*_list, &progress, nullptr, true);
-
-   if (_error->PendingError())
-      return _error->
-         Error(_
-               ("The package lists or status file could not be parsed or opened."));
-
-   // Open the cache file
-   FileFd File;
-   File.Open(_config->FindFile("Dir::Cache::pkgcache"), FileFd::ReadOnly);
-   if (_error->PendingError())
-      return false;
-
-   _map = new MMap(File, MMap::Public | MMap::ReadOnly);
-   if (_error->PendingError())
+   if (!cache.Open(progress, false))
       return false;
 
-   // Create the dependency cache
-   _cache = new pkgCache(_map);
-   if (_error->PendingError())
-      return false;
-
-   _policy = new pkgPolicy(_cache);
-   if (_error->PendingError() == true)
-      return false;
-   if (ReadPinFile(*_policy) == false)
+   if (ReadPinFile(*cache.GetPolicy(), RStateDir() + "/preferences") == false)
       return false;
-   if (ReadPinDir(*_policy) == false)
-      return false;
-
-   if (ReadPinFile(*_policy, RStateDir() + "/preferences") == false)
-      return false;
-
-   _dcache = new pkgDepCache(_cache, _policy);
-   _dcache->Init(&progress);
 
    _trust_cache.clear();
 
@@ -108,7 +60,7 @@ bool RPackageCache::open(OpProgress &progress, bool locking)
       return false;
 
    // Check that the system is OK
-   if (_dcache->DelCount() != 0 || _dcache->InstCount() != 0)
+   if (deps()->DelCount() != 0 || deps()->InstCount() != 0)
       return _error->Error(_("Internal Error, non-zero counts"));
 
    return true;
@@ -119,10 +71,10 @@ vector<string> RPackageCache::getPolicyArchives(bool filenames_only=false)
    //std::cout << "RPackageCache::getPolicyComponents() " << std::endl;
 
    vector<string> archives;
-   for (pkgCache::PkgFileIterator F = _cache->FileBegin(); F.end() == false;
+   for (pkgCache::PkgFileIterator F = pkgCache(cache).FileBegin(); F.end() == false;
         F++) {
       pkgIndexFile *Indx;
-      _list->FindIndex(F, Indx);
+      list()->FindIndex(F, Indx);
       _system->FindIndex(F, Indx);
 
       if(filenames_only) {
diff --git a/common/rpackagecache.h b/common/rpackagecache.h
index 60cd6587..ec8e8489 100644
--- a/common/rpackagecache.h
+++ b/common/rpackagecache.h
@@ -28,6 +28,7 @@
 #include <string>
 #include <vector>
 
+#include <apt-pkg/cachefile.h>
 #include <apt-pkg/depcache.h>
 #include <apt-pkg/sourcelist.h>
 #include <apt-pkg/pkgsystem.h>
@@ -39,14 +40,7 @@ class pkgCache;
 
 
 class RPackageCache {
-   MMap *_map;
-
-   pkgCache *_cache;
-   pkgPolicy *_policy;
-
-   pkgDepCache *_dcache;
-   pkgSourceList *_list;
-
+   pkgCacheFile cache;
    // speed up IsTrusted()
    std::map<pkgCache::PkgFileIterator, pkgIndexFile*> _trust_cache;
 
@@ -54,29 +48,26 @@ class RPackageCache {
 
  public:
    inline pkgDepCache *deps() {
-      return _dcache;
+      return cache.GetDepCache();
    }
    inline pkgSourceList *list() {
-      return _list;
+      return cache.GetSourceList();
    }
    inline std::map<pkgCache::PkgFileIterator, pkgIndexFile*>& trust_cache() {
       return _trust_cache;
    }
 
-   bool open(OpProgress &progress, bool lock=true);
+   bool open(OpProgress *progress, bool lock=true);
 
    std::vector<std::string> getPolicyArchives(bool filenames_only);
 
    bool lock();
    void releaseLock();
 
-   RPackageCache()
-     : _map(0), _cache(0), _policy(0), _dcache(0), _locked(false)
+   RPackageCache() : _locked(false)
    {
-      _list = new pkgSourceList();
    }
    ~RPackageCache() {
-      delete _list;
    }
 };
 
diff --git a/common/rpackagelister.cc b/common/rpackagelister.cc
index 4f6c5928..084e7ae0 100644
--- a/common/rpackagelister.cc
+++ b/common/rpackagelister.cc
@@ -61,7 +61,7 @@
 #include <apt-pkg/sourcelist.h>
 #include <apt-pkg/pkgsystem.h>
 #include <apt-pkg/strutl.h>
-#include <apt-pkg/md5.h>
+#include <apt-pkg/hashes.h>
 #ifndef HAVE_RPM
 #include <apt-pkg/debfile.h>
 #endif
@@ -312,7 +312,7 @@ bool RPackageLister::openCache()
    if(getuid() != 0)
       lock = false;
 
-   if (!_cache->open(*_progMeter,lock)) {
+   if (!_cache->open(_progMeter,lock)) {
       _progMeter->Done();
       _cacheValid = false;
       return _error->Error("_cache->open() failed, please report.");
